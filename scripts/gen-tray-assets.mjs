// Generates tray and app icon assets from SVG sources in public/logo
// - Tray: trayTemplate.png (16x16), trayTemplate@2x.png (32x32)
// - App icons: 256x256.png, 512x512.png, 1024x1024.png
// - macOS: icon-logo.icns via iconutil (if available)
// - Windows: icon-logo.ico via ImageMagick (prefers `magick`, falls back to `convert`)

import fs from 'fs'
import path from 'path'
import url from 'url'
import sharp from 'sharp'
import { execSync } from 'child_process'

const __dirname = path.dirname(url.fileURLToPath(import.meta.url))

const rootDir = path.resolve(__dirname, '..')
const logoDir = path.join(rootDir, 'src', 'renderer', 'public', 'logo')
const traySvgPath = path.join(logoDir, 'tray.svg')
const appIconSvgPath = path.join(logoDir, 'app-icon.svg')
const out1x = path.join(logoDir, 'trayTemplate.png')
const out2x = path.join(logoDir, 'trayTemplate@2x.png')

const ensureDir = (dirPath) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true })
  }
}

const defaultTraySvg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="64" height="64" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
  <g fill="#000" fill-rule="nonzero">
    <path d="M28 4 L12 36 H28 L20 60 L52 28 H36 L44 4 Z"/>
  </g>
</svg>`

const defaultAppIconSvg = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<svg width=\"1024\" height=\"1024\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\">
  <defs>
    <linearGradient id=\"g\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\"> 
      <stop offset=\"0%\" stop-color=\"#6EE7F9\"/>
      <stop offset=\"100%\" stop-color=\"#A78BFA\"/>
    </linearGradient>
  </defs>
  <rect x=\"0\" y=\"0\" width=\"1024\" height=\"1024\" rx=\"200\" fill=\"url(#g)\"/>
  <g fill=\"#fff\" transform=\"translate(128,128)\">
    <path d=\"M384 0 L256 256 H384 L320 512 L640 256 H512 L576 0 Z\"/>
  </g>
  <title>SparkPilot</title>
  <desc>Sample app icon generated as default; replace with your own.</desc>
  <metadata>Generated by gen-tray-assets.mjs</metadata>
</svg>`

function commandExists(cmd) {
  try {
    execSync(`command -v ${cmd}`, { stdio: 'ignore' })
    return true
  } catch {
    return false
  }
}

async function generateTrayFromSvg() {
  ensureDir(logoDir)

  if (!fs.existsSync(traySvgPath)) {
    fs.writeFileSync(traySvgPath, defaultTraySvg, 'utf8')
    console.log(`Created sample tray SVG at ${traySvgPath}`)
  }

  const svgBuffer = fs.readFileSync(traySvgPath)

  // Generate 1x (16x16)
  await sharp(svgBuffer)
    .resize(16, 16, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
    .png({ compressionLevel: 9 })
    .toFile(out1x)

  // Generate 2x (32x32)
  await sharp(svgBuffer)
    .resize(32, 32, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
    .png({ compressionLevel: 9 })
    .toFile(out2x)

  console.log(`Generated: ${path.basename(out1x)}, ${path.basename(out2x)}`)
}

async function generateAppIconFromSvg() {
  ensureDir(logoDir)
  if (!fs.existsSync(appIconSvgPath)) {
    fs.writeFileSync(appIconSvgPath, defaultAppIconSvg, 'utf8')
    console.log(`Created sample app icon SVG at ${appIconSvgPath}`)
  }

  const svg = fs.readFileSync(appIconSvgPath)
  const sizes = [256, 512, 1024]
  for (const size of sizes) {
    const outPng = path.join(logoDir, `${size}x${size}.png`)
    await sharp(svg)
      .resize(size, size, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
      .png({ compressionLevel: 9 })
      .toFile(outPng)
    console.log(`Generated: ${path.basename(outPng)}`)
  }

  // Generate macOS .icns via iconutil if available
  const iconsetDir = path.join(logoDir, 'app.iconset')
  ensureDir(iconsetDir)
  const iconsetSpecs = [
    { name: 'icon_16x16.png', size: 16 },
    { name: 'icon_16x16@2x.png', size: 32 },
    { name: 'icon_32x32.png', size: 32 },
    { name: 'icon_32x32@2x.png', size: 64 },
    { name: 'icon_128x128.png', size: 128 },
    { name: 'icon_128x128@2x.png', size: 256 },
    { name: 'icon_256x256.png', size: 256 },
    { name: 'icon_256x256@2x.png', size: 512 },
    { name: 'icon_512x512.png', size: 512 },
    { name: 'icon_512x512@2x.png', size: 1024 },
  ]
  for (const spec of iconsetSpecs) {
    await sharp(svg)
      .resize(spec.size, spec.size, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
      .png({ compressionLevel: 9 })
      .toFile(path.join(iconsetDir, spec.name))
  }

  const icnsPath = path.join(logoDir, 'icon-logo.icns')
  if (process.platform === 'darwin' && commandExists('iconutil')) {
    try {
      execSync(`iconutil -c icns "${iconsetDir}" -o "${icnsPath}"`, { stdio: 'inherit' })
      console.log(`Generated: ${path.basename(icnsPath)}`)
    } catch (err) {
      console.warn('iconutil failed to generate .icns:', err?.message ?? err)
    }
  } else {
    console.warn('Skipping .icns generation (iconutil not available).')
  }

  // Generate Windows .ico via ImageMagick (prefer IM v7 `magick`)
  const icoPath = path.join(logoDir, 'icon-logo.ico')
  const magickCmd = commandExists('magick') ? 'magick' : commandExists('convert') ? 'convert' : null
  if (magickCmd) {
    try {
      const icoSrcSizes = [16, 24, 32, 48, 64, 128, 256]
      const tmpPngs = []
      for (const size of icoSrcSizes) {
        const tmp = path.join(logoDir, `tmp_${size}.png`)
        await sharp(svg)
          .resize(size, size, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
          .png()
          .toFile(tmp)
        tmpPngs.push(tmp)
      }
      execSync(`${magickCmd} ${tmpPngs.map((p) => `"${p}"`).join(' ')} "${icoPath}"`, {
        stdio: 'inherit',
      })
      tmpPngs.forEach((p) => fs.unlinkSync(p))
      console.log(`Generated: ${path.basename(icoPath)}`)
    } catch (err) {
      console.warn('ImageMagick failed to generate .ico:', err?.message ?? err)
    }
  } else {
    console.warn('Skipping .ico generation (ImageMagick not available).')
  }
}

async function main() {
  await generateTrayFromSvg()
  await generateAppIconFromSvg()
}

main().catch((err) => {
  console.error('Asset generation failed:', err)
  process.exit(1)
})
